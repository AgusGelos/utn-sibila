/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainjframe;

import java.awt.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle;
import api.ElementoExamen;
import api.Respuesta;
import api.Termino;
import com.google.common.collect.ImmutableList;
import com.tinkerpop.blueprints.Vertex;
import conceptmanager.ConceptManager;
import conceptmanager.Concepto;
import conceptmanager.GraphViewer;
import controlador.Controller;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import ortografia.LangTools;

/**
 *
 * @author Martin
 */
public class frmFastEval extends javax.swing.JFrame {

    Respuesta r1, r2;
    ConceptManager cm;
    GraphViewer gv;

    /**
     * Creates new form FastEval
     */
    public frmFastEval() {
        initComponents();
        cm = new ConceptManager("remote:localhost/PPR", "admin", "admin");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        jScrollPane1 = new JScrollPane();
        r1_txt = new JTextArea();
        btnValidar = new JButton();
        jScrollPane2 = new JScrollPane();
        txtSOUT = new JTextArea();
        jScrollPane3 = new JScrollPane();
        r2_txt = new JTextArea();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        btnClear = new JButton();
        chkVerGraficos = new JCheckBox();

        //======== this ========
        setTitle("Evaluador r\u00e1pido");
        Container contentPane = getContentPane();

        //======== jScrollPane1 ========
        {

            //---- r1_txt ----
            r1_txt.setColumns(20);
            r1_txt.setLineWrap(true);
            r1_txt.setRows(5);
            r1_txt.setWrapStyleWord(true);
            jScrollPane1.setViewportView(r1_txt);
        }

        //---- btnValidar ----
        btnValidar.setText("Analizar");
        btnValidar.addActionListener(e -> btnValidarActionPerformed(e));

        //======== jScrollPane2 ========
        {

            //---- txtSOUT ----
            txtSOUT.setEditable(false);
            txtSOUT.setColumns(20);
            txtSOUT.setLineWrap(true);
            txtSOUT.setRows(5);
            txtSOUT.setWrapStyleWord(true);
            jScrollPane2.setViewportView(txtSOUT);
        }

        //======== jScrollPane3 ========
        {

            //---- r2_txt ----
            r2_txt.setColumns(20);
            r2_txt.setLineWrap(true);
            r2_txt.setRows(5);
            r2_txt.setWrapStyleWord(true);
            jScrollPane3.setViewportView(r2_txt);
        }

        //---- jLabel1 ----
        jLabel1.setText("Respuesta del DOCENTE");

        //---- jLabel2 ----
        jLabel2.setText("Respuesta del ALUMNO");

        //---- btnClear ----
        btnClear.setText("Clear log");
        btnClear.addActionListener(e -> btnClearActionPerformed(e));

        //---- chkVerGraficos ----
        chkVerGraficos.setSelected(true);
        chkVerGraficos.setText("Ver los gr\u00e1ficos");

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane3, GroupLayout.DEFAULT_SIZE, 556, Short.MAX_VALUE)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup()
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(GroupLayout.Alignment.TRAILING, contentPaneLayout.createSequentialGroup()
                            .addComponent(btnClear, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chkVerGraficos, GroupLayout.PREFERRED_SIZE, 234, GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnValidar, GroupLayout.PREFERRED_SIZE, 118, GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap())
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jLabel2)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane3, GroupLayout.PREFERRED_SIZE, 42, GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(btnValidar, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnClear, GroupLayout.PREFERRED_SIZE, 34, GroupLayout.PREFERRED_SIZE)
                        .addComponent(chkVerGraficos))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                    .addContainerGap())
        );
        pack();
        setLocationRelativeTo(getOwner());
    }// </editor-fold>//GEN-END:initComponents

    public boolean ValidarTexto(Respuesta respuesta) throws IOException {
        if (respuesta.getTexto().equalsIgnoreCase("")) {
            return true;
        }

        LangTools lt = new LangTools();
        Respuesta p = lt.CheckRespuesta(respuesta, cm.getConceptosComplejos(), cm.getRelacionesComplejas());
        StringBuilder bld = new StringBuilder();
        bld.append(p.getTexto()).append("\n");
        bld.append(String.format("Cantidad de palabras: %d\n", respuesta.getWordCount()));
        for (Termino termino : respuesta.getTerminos()) {
            if (termino.hasErrors()) {
                String item = String.format("Error en la palabra: %s\n  - Correcci√≥n sugerida: %s\n", termino.getNombre(), termino.getSugerenciasCorreccion());
                bld.append(item);
            }
        }
        if (!respuesta.hasErrors()) {
            bld.append("El texto NO contiene errores.");
        }

        txtSOUT.append(bld.toString());
        return !p.hasErrors();
    }

    public void DetectarConceptos(Respuesta r) {
        // Hacer una consulta a la base de Conceptos
        Respuesta r_aux = cm.evaluarRespuesta(r);

        StringBuilder bld = new StringBuilder();
        bld.append("\n------------ DETECTAR CONCEPTOS ------------\n");
        bld.append(r.getTexto());
        String msg = String.format("\n------------ TERMINOS [%d] ------------\n", r_aux.getTerminosCount());
        bld.append(msg);
        bld.append(r_aux.getTerminosAsString(false));
        bld.append("\n------------ VALOR ------------\n");
        bld.append(r_aux.getValuesAsString());
        bld.append("\n------------ DETECTAR CONCEPTOS ------------\n");

        txtSOUT.append(bld.toString());
    }

    private void DividirConceptos(Respuesta r) {
        // Obtener el primer concepto
        String primer_concepto = r.getPrimerConceptoAsString();
        // Obtener todos los conceptos secundarios
        ArrayList<String> otros_conceptos = r.getConceptosSecundariosAsString();
        StringBuilder bld = new StringBuilder();
        bld.append("\n------------ DIVIDIR CONCEPTOS ------------\n");
        Concepto concepto_inicial = cm.getConceptoByName(r.getPrimerConceptoAsString());
        bld.append(String.format("TEXTO ORIGINAL: %s\n", r.getTexto()));
        bld.append(String.format("CONCEPTO RAIZ: %s\n", primer_concepto));
        bld.append(String.format("CONCEPTOS SECUNDARIOS: %s\n", otros_conceptos.toString()));
        bld.append("\n------------ DIVIDIR CONCEPTOS ------------\n");
        txtSOUT.append(bld.toString());
    }

    private void DetectarRutas(Respuesta r) {
        Concepto concepto_inicial = cm.getConceptoByName(r.getPrimerConceptoAsString());
        ArrayList<String> conceptos_incluidos = r.getConceptosSecundariosAsString().size() > 0 ? r.getConceptosSecundariosAsString() : null;
        StringBuilder bld = new StringBuilder();
        bld.append("\n------------ DETECTAR RUTAS ------------\n");
        bld.append(cm.buildRouteQuery(concepto_inicial, conceptos_incluidos));
        ImmutableList<Vertex> result = cm.findRoute(concepto_inicial, conceptos_incluidos);
        //chequeamos si el objeto fue creado con anterioridad
        /*
        if (gv != null) {
            // Si fue creado, cerramos el Viewer y creamos uno nuevo
            gv.closeViewer();
        }
         */
        if (chkVerGraficos.isSelected()) {
            GraphViewer gv = new GraphViewer();
            gv.viewVertexList(result, null);
        }
        bld.append("\n------------ DETECTAR RUTAS ------------\n");
        txtSOUT.append(bld.toString());
    }

    private void CalcularDelta(Respuesta base, Respuesta candidata) {
        StringBuilder bld = new StringBuilder();
        bld.append("\n------------ CALCULAR DELTA ------------\n");
        Respuesta delta = base.getDeltas(candidata);
        bld.append(delta.toStringDelta());
        //bld.append("\n ... DELTA BASE ...");
        //bld.append(base.toStringDelta());
        //bld.append("\n ... DELTA CANDIDATA ...");
        //bld.append(candidata.toStringDelta());
        bld.append("\n------------ CALCULAR DELTA ------------\n");
        txtSOUT.append(bld.toString());
    }

    private double CalcularPeso(Respuesta base, Respuesta candidata) {
        StringBuilder bld = new StringBuilder();
        double ret = 0.0;
        bld.append("\n------------ CALCULAR PESO ------------\n");
        if (candidata == null) {
            ret = base.calcularPeso();    
        } else {
            ret = candidata.calcularPeso(base);  
        }
        bld.append(ret);
        bld.append("\n------------ CALCULAR PESO ------------\n");
        txtSOUT.append(bld.toString());
        return ret;
    }


    private void btnValidarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarActionPerformed
        try {
            txtSOUT.setText("");

            /*r1 = new Respuesta(r1_txt.getText());
            r2 = new Respuesta(r2_txt.getText());
            double peso_r1 = 0;
            double peso_r2 = 0;
            double calificacion = 0;*/
            Controller c = new Controller();
            txtSOUT.setText("Calificaci√≥n: " + c.calcularCalificaci√≥nRespuesta(r2_txt.getText(), r1_txt.getText()));
            //peso_r1 = c.calcularPesoRespuesta(r1_txt.getText());
            //peso_r2 = c.calcularPesoRespuesta(r2_txt.getText(), r1_txt.getText());
            /*
            boolean texto1_valido = ValidarTexto(r1);
            boolean texto2_valido = ValidarTexto(r2);
            if (texto1_valido == true && r1.getTerminosCount() > 0) {
                DetectarConceptos(r1);
                DividirConceptos(r1);
                DetectarRutas(r1);
                peso_r1 = CalcularPeso(r1,null);
            }
            if (texto2_valido == true && r2.getTerminosCount() > 0) {
                DetectarConceptos(r2);
                DividirConceptos(r2);
                DetectarRutas(r2);
                CalcularDelta(r1, r2);
                peso_r2 = CalcularPeso(r1,r2);
            }*/



           /* if (peso_r2 > 0) {
                // Calcular la relacion entre el peso de la respuesta del alumno
                // y el peso de la respuesta del docente
                calificacion = peso_r2 / peso_r1;
            }*/
/*
            StringBuilder bld = new StringBuilder();
            bld.append("\n------------ CALCULAR CALIFICACION ------------\n");
            bld.append(String.format("Peso de rta. docente: %f\n", peso_r1));
            if (peso_r2 > 0) {
                bld.append(String.format("Peso de rta. alumno: %f\n", peso_r2));
                bld.append(String.format("Calificaci√≥n: %f\n", calificacion));
            }
            bld.append("\n------------ CALCULAR CALIFICACION ------------\n");
            txtSOUT.append(bld.toString());*/
        }
        catch (Exception ex) {
            Logger.getLogger(ElementoExamen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnValidarActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtSOUT.setText("");
    }//GEN-LAST:event_btnClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JScrollPane jScrollPane1;
    private JTextArea r1_txt;
    private JButton btnValidar;
    private JScrollPane jScrollPane2;
    private JTextArea txtSOUT;
    private JScrollPane jScrollPane3;
    private JTextArea r2_txt;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JButton btnClear;
    private JCheckBox chkVerGraficos;
    // End of variables declaration//GEN-END:variables
}
