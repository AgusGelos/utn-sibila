/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainjframe;

import api.Termino;
import conceptmanager.ConceptManager;
import conceptmanager.Concepto;
import conceptmanager.GraphViewer;
import conceptmanager.Relacion;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import javax.swing.JOptionPane;
import ortografia.CommonsFunctions;
import ortografia.ManejoLang;

/**
 *
 * @author Martin
 */
public class frmAdminEstructuras extends javax.swing.JFrame {
    
    String conceptoOrigen;
    String conceptoDestino;
    String relacion;
    boolean validate = false;
    
    public frmAdminEstructuras() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txt_concepto_origen = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_relacion = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txt_concepto_destino = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_log = new javax.swing.JTextArea();
        btn_insertar = new javax.swing.JButton();
        btn_clear = new javax.swing.JButton();
        btn_insertar1 = new javax.swing.JButton();

        setTitle("Concept Manager");
        setResizable(false);

        jLabel1.setText("Carga de Estructuras a la Base de Datos");

        txt_concepto_origen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_concepto_origenActionPerformed(evt);
            }
        });

        jLabel2.setText("Concepto");

        jLabel3.setText("Relación");

        jLabel4.setText("Concepto");

        txt_log.setColumns(20);
        txt_log.setRows(5);
        jScrollPane1.setViewportView(txt_log);

        btn_insertar.setText("Validar");
        btn_insertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertarActionPerformed(evt);
            }
        });

        btn_clear.setText("Clear");
        btn_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clearActionPerformed(evt);
            }
        });

        btn_insertar1.setText("Insertar");
        btn_insertar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_insertar1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_concepto_origen))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_relacion)
                            .addComponent(txt_concepto_destino)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_clear, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(btn_insertar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_insertar1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txt_concepto_origen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_relacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_concepto_destino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_clear)
                    .addComponent(btn_insertar)
                    .addComponent(btn_insertar1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txt_concepto_origenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_concepto_origenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_concepto_origenActionPerformed

    private void btn_insertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertarActionPerformed
        // TODO add your handling code here:
        try {
            if (validarCamposVacios()) {
                this.txt_log.append("Validación de campos no vacíos exitosa\n");
                if (validarOrtografia()) {
                    this.txt_log.append("Ortografía Correcta\n");
                    //Formateamos como corresponda.
                    //Concepto -> Mayúscula.
                    //Relacion -> CamelCase.
                    
                    
                     
                    ArrayList<Termino> co = this.cambiarASingular(this.txt_concepto_origen.getText().toUpperCase().split(" "));
                    conceptoOrigen = this.aString(co);
                    
                    ArrayList<Termino> cd = this.cambiarASingular(this.txt_concepto_destino.getText().toUpperCase().split(" "));
                    conceptoDestino = this.aString(cd);
                    
                    String rel = "";
                    ArrayList<Termino> relaciones = this.cambiarASingular(this.txt_relacion.getText().split(" "));
                    rel = this.aString(relaciones);
                    relacion = CommonsFunctions.toCamelCase(rel);
                    
                    
                    //Mostramos como queda al usuario
                    this.txt_log.append("Concepto Origen: " + conceptoOrigen + "\n");
                    this.txt_log.append("Relación: " + relacion + "\n");
                    this.txt_log.append("Concepto Destino: " + conceptoDestino + "\n");
                    graficar(conceptoOrigen, relacion, conceptoDestino);
                    
                    bloquearCampos();
                    validate = true;


                } else {
                    this.txt_log.append("[ERROR] Corrija las palabras ingresadas\n");
                }
            } else {
                this.txt_log.append("[ERROR] Debe completar todos los campos\n");
            }
        } catch (Exception e) {
            this.txt_log.append(e.getMessage() + "\n");
        }

    }//GEN-LAST:event_btn_insertarActionPerformed

    
    private String aString(ArrayList<Termino> terminos){
        String cadena = "";
            for (int i = 0; i < terminos.size(); i++) {
                    cadena += terminos.get(i).getNombre();
                    if ((i+1) != terminos.size()) cadena += " ";
        }
        return cadena;
    }
    
    private void graficar(String conceptoOrigen,String relacion, String conceptoDestino){
        LinkedHashMap<Integer, String> terminos = new LinkedHashMap();
        terminos.put(1,conceptoOrigen);
        terminos.put(2, relacion);
        terminos.put(3,conceptoDestino);
        GraphViewer grafico = new GraphViewer();
        grafico.viewMap(terminos, true);
    };
    
    private void bloquearCampos(){
        this.txt_concepto_destino.setEnabled(false);
        this.txt_concepto_origen.setEnabled(false);
        this.txt_relacion.setEnabled(false);
    }
    
    private void btn_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clearActionPerformed

        this.txt_log.setText("");
        this.txt_concepto_origen.setText("");
        this.txt_concepto_origen.setEnabled(true);
        this.txt_concepto_destino.setText("");
        this.txt_concepto_destino.setEnabled(true);
        this.txt_relacion.setText("");
        this.txt_relacion.setEnabled(true);
        validate = false;
    }//GEN-LAST:event_btn_clearActionPerformed

    private void btn_insertar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_insertar1ActionPerformed
          
        if (validate){
            ConceptManager cm = new ConceptManager("remote:localhost/PPR", "admin", "admin");
            Concepto origen = new Concepto(conceptoOrigen);
            Concepto destino = new Concepto(conceptoDestino);
            Relacion rel = new Relacion("0", relacion, relacion);
            boolean res = cm.addStruct(origen, destino, rel);
            if (res){ 
                JOptionPane.showMessageDialog(this, "La estructura se ha cargado correctamente");
                this.txt_log.append("La estructura se ha cargado correctamente");
            }
            else {
                JOptionPane.showMessageDialog(this, "Ha ocurrido un error. La estructura no se ha cargado");
                this.txt_log.append("Ha ocurrido un error. La estructura no se ha cargado");
            }
        }
        else {
            JOptionPane.showMessageDialog(this, "Debe validar antes de continuar");
        }
    }//GEN-LAST:event_btn_insertar1ActionPerformed

    private ArrayList<Termino> cambiarASingular(String [] terminos){
        ArrayList<Termino> term = new ArrayList<Termino>();
        for (int i = 0; i < terminos.length; i++) {
            term.add(new Termino(terminos[i]));
        }
        
        ManejoLang ml = new ManejoLang();
        return ml.cambiarPluralPorSingular(term);
        
     }
    
    private boolean validarCamposVacios() {
        boolean flag = false;
        if (!this.txt_concepto_origen.getText().isEmpty()
                && !this.txt_concepto_destino.getText().isEmpty()
                && !this.txt_relacion.getText().isEmpty()) {
            flag = true;
        }
        return flag;
    }
    
    //Corrige hasta encontrar un término con error, en ese caso, muestra los errores y se
    //corta el método ahí
    private boolean validarOrtografia() throws IOException {
        boolean flag = true;
        ArrayList<String> palabras = new ArrayList();
        palabras.add(this.txt_concepto_origen.getText());
        palabras.add(this.txt_relacion.getText());
        palabras.add(this.txt_concepto_destino.getText());

        for (int i = 0; i < palabras.size(); i++) {
            if (!corregirPalabra(palabras.get(i))) {
                flag = false;
                break;
            }
        }
        return flag;
    }

    //Retorna false si hay error
    private boolean corregirPalabra(String palabra) throws IOException {
        boolean error = false;
        ManejoLang ml = new ManejoLang();
        ArrayList<Termino> terminos = ml.getListaDeTerminos(palabra.toUpperCase());

        StringBuilder bld = new StringBuilder();

        for (Termino termino : terminos) {
            if (termino.hasErrors()) {
                String item = String.format("Error en la palabra: %s\n  - Corrección sugerida: %s\n", termino.getNombre(), termino.getSugerenciasCorreccion());
                this.txt_log.append(item);
                error = true;
                break;
            }
        }
        return !error;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_clear;
    private javax.swing.JButton btn_insertar;
    private javax.swing.JButton btn_insertar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txt_concepto_destino;
    private javax.swing.JTextField txt_concepto_origen;
    private javax.swing.JTextArea txt_log;
    private javax.swing.JTextField txt_relacion;
    // End of variables declaration//GEN-END:variables
}
