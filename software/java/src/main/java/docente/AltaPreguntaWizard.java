/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package docente;

import mainjframe.*;
import api.Pregunta;
import api.Respuesta;
import api.Termino;
import api.ElementoExamen;
import com.google.common.base.Splitter;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.tinkerpop.blueprints.Vertex;
import conceptmanager.ConceptManager;
import conceptmanager.Concepto;
import conceptmanager.GraphViewer;
import conceptmanager.Relacion;
import java.io.IOException;
import java.time.zone.ZoneRulesProvider;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import ortografia.CommonsFunctions;
import ortografia.LangTools;
import ortografia.ManejoLang;
import scala.Tuple2;

/**
 *
 * @author Martin
 */
public class AltaPreguntaWizard extends javax.swing.JFrame {

    Pregunta pregunta;
    Respuesta respuesta;
    ArrayList<Termino> terminosAgregar;
    GrillaTerminos modelo;
    /**
     * Creates new form CorreccionWizard
     */
    public AltaPreguntaWizard(Pregunta pregunta) {
        respuesta = new Respuesta();
        terminosAgregar=new ArrayList<>();
        initComponents();
        tabPanel.setEnabledAt(1, false);
        tabPanel.setEnabledAt(2, false);
        lblPregunta.setText(pregunta.getTexto());
        grillaTerminos.setRowHeight(20);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tabPanel = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtTextoPregunta = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        txtMostrarErrores = new javax.swing.JTextArea();
        btnValidarPregunta = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        lstRespuestas = new javax.swing.JComboBox<>();
        lblPregunta = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtTextoRespuesta = new javax.swing.JTextArea();
        btnValidarRespuesta = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        grillaTerminos = new javax.swing.JTable();
        btnGraph = new javax.swing.JButton();
        jButtonUnirConceptos = new javax.swing.JButton();
        btnConfirmar = new javax.swing.JButton();
        jButtonSepararTerminos = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtConceptosAlta = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtRelacionesAlta = new javax.swing.JTextArea();
        jPanel10 = new javax.swing.JPanel();
        btn_alta_respuesta = new javax.swing.JButton();
        btnNextPregunta = new javax.swing.JButton();
        btnPrev = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(jTable1);

        setTitle("Asistente de alta de pregunta/respuesta docente");
        setResizable(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Paso 1: PREGUNTA");

        jLabel8.setText("Ingresar la Pregunta y evaluar si es correcto, ortográfica y sintácticamente");

        txtTextoPregunta.setColumns(20);
        txtTextoPregunta.setLineWrap(true);
        txtTextoPregunta.setRows(5);
        txtTextoPregunta.setText("El paradigma poo se basa en objetos que usan atributos y sus características son herencia y polimorfismo");
        txtTextoPregunta.setWrapStyleWord(true);
        jScrollPane7.setViewportView(txtTextoPregunta);

        txtMostrarErrores.setEditable(false);
        txtMostrarErrores.setColumns(20);
        txtMostrarErrores.setRows(5);
        jScrollPane8.setViewportView(txtMostrarErrores);

        btnValidarPregunta.setText("Analizar");
        btnValidarPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarPreguntaActionPerformed(evt);
            }
        });

        jLabel9.setText("Tipo de Pregunta: ");
        jLabel9.setEnabled(false);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A Desarrollar", "Enumerativa", "Codificación" }));
        jComboBox1.setDoubleBuffered(true);
        jComboBox1.setEnabled(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        lstRespuestas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "El paradigma poo se basa en objetos que usan atributos y sus características son herencia y polimorfismo", "El paradigma relacional utiliza tuplas que son conjuntos de atributos", "La lógica de primer orden utiliza nexos y proposiciones para modelar frases y oraciones", "Un paradigma es un modelo de diseño e implementación de programas" }));
        lstRespuestas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstRespuestasActionPerformed(evt);
            }
        });

        lblPregunta.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPregunta.setText("Paso 1: PREGUNTA");
        lblPregunta.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lblPregunta.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lstRespuestas, 0, 640, Short.MAX_VALUE)
                    .addComponent(jScrollPane8)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnValidarPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblPregunta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(lstRespuestas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnValidarPregunta, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tabPanel.addTab("Paso 1", jPanel4);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("Paso 2: RESPUESTA");

        jLabel2.setText("Ingresar Respuesta y evaluar si es correcto, ortográfica y sintácticamente");

        txtTextoRespuesta.setColumns(20);
        txtTextoRespuesta.setLineWrap(true);
        txtTextoRespuesta.setRows(5);
        txtTextoRespuesta.setText("El paradigma poo se basa en objetos que usan atributos y sus características son herencia y polimorfismo");
        txtTextoRespuesta.setWrapStyleWord(true);
        jScrollPane1.setViewportView(txtTextoRespuesta);

        btnValidarRespuesta.setText("Analizar");
        btnValidarRespuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidarRespuestaActionPerformed(evt);
            }
        });

        grillaTerminos.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        grillaTerminos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(grillaTerminos);

        btnGraph.setText("Graficar");
        btnGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGraphActionPerformed(evt);
            }
        });

        jButtonUnirConceptos.setText("Unir Términos");
        jButtonUnirConceptos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnirConceptosActionPerformed(evt);
            }
        });

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        jButtonSepararTerminos.setText("Separar Términos");
        jButtonSepararTerminos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSepararTerminosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnGraph, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonUnirConceptos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConfirmar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSepararTerminos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonUnirConceptos, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jButtonSepararTerminos, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnGraph, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 48, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(167, 167, 167))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnValidarRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnValidarRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        tabPanel.addTab("Paso 2", jPanel5);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setText("Paso 3: Cargar Terminos");

        jLabel1.setText("Conceptos a dar de alta:");

        txtConceptosAlta.setColumns(20);
        txtConceptosAlta.setRows(5);
        jScrollPane2.setViewportView(txtConceptosAlta);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 595, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel3.setText("Relaciones a dar de alta:");

        txtRelacionesAlta.setColumns(20);
        txtRelacionesAlta.setRows(5);
        jScrollPane3.setViewportView(txtRelacionesAlta);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btn_alta_respuesta.setText("Dar de alta");
        btn_alta_respuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_alta_respuestaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_alta_respuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(btn_alta_respuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        tabPanel.addTab("Paso 3", jPanel6);

        btnNextPregunta.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btnNextPregunta.setText("Siguiente »");
        btnNextPregunta.setEnabled(false);
        btnNextPregunta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextPreguntaActionPerformed(evt);
            }
        });

        btnPrev.setFont(new java.awt.Font("Consolas", 1, 18)); // NOI18N
        btnPrev.setText("« Anterior");
        btnPrev.setEnabled(false);
        btnPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 672, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNextPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrev, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNextPregunta, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextPreguntaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnNextPreguntaActionPerformed
    {//GEN-HEADEREND:event_btnNextPreguntaActionPerformed
        // Pasar a la siguiente pestaña
        tabPanel.setSelectedIndex(tabPanel.getSelectedIndex() + 1);
        boolean ultima_pagina = tabPanel.getSelectedIndex() == tabPanel.getTabCount() - 1;
        btnNextPregunta.setEnabled(false);
        btnPrev.setEnabled(tabPanel.getSelectedIndex() > 0);
//        if (ultima_pagina) {
//            tabPanel.setEnabledAt(2, true);
//        }
//        
    }//GEN-LAST:event_btnNextPreguntaActionPerformed

    private void btnPrevActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnPrevActionPerformed
    {//GEN-HEADEREND:event_btnPrevActionPerformed
        // Pasar a la anterior pestaña
        tabPanel.setSelectedIndex(tabPanel.getSelectedIndex() - 1);
        boolean primera_pagina = tabPanel.getSelectedIndex() == 0;
        btnPrev.setEnabled(!primera_pagina);
        btnNextPregunta.setEnabled(tabPanel.getSelectedIndex() < tabPanel.getTabCount());
    }//GEN-LAST:event_btnPrevActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void btnValidarPreguntaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarPreguntaActionPerformed
        try {
            // respuesta es una propiedad de la clase, porque debo utilizarla
            // en distintos lugares
            // Se inicializa al analizar el texto
            pregunta = new Pregunta(txtTextoPregunta.getText());
            boolean seguir = ValidarTexto(pregunta);
            tabPanel.setEnabledAt(1, true);
            btnNextPregunta.setEnabled(seguir);
        } catch (IOException ex) {
            Logger.getLogger(ElementoExamen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnValidarPreguntaActionPerformed

    /**
     * Verifica que la estructura de la grilla sea válida.
     * Esto es: Que no queden terminos sin asignar, que no haya dos conceptos pegados
     * o dos relaciones pegadas, que inicie en concepto (o ignorar) y que termine
     * en concepto (o ignorar)
     * @return true si la grilla es valida, false caso contrario
     */
    private boolean ValidarGrilla ()
    {
        boolean valid = true;
        String tipo_termino_anterior="";
        // Primero armar una lista quitando los IGNORAR, para hacer una lista
        // contigua de elementos evaluables
        ArrayList<Termino> evaluables = new ArrayList();
        for (Termino t : modelo.getTerminos()) {
            if (t.getTipo() != "I")
                evaluables.add(t);
        }
        // Ahora validar los elementos, sabiendo que no hay discontinuidades
        // ocasionadas por IGNORAR entre conceptos o relaciones
        int Rows = evaluables.size();
        int i = 0;
        while ((i < Rows)&&(valid))
        {
            Termino t = evaluables.get(i);
            boolean primero = (i==0);
            boolean ultimo = (i==(Rows-1));
            String tipo_termino = t.getTipo();
            // El primer y el ultimo término tiene que ser concepto
            if (primero || ultimo)
            {
                if (tipo_termino != "C")
                    valid = false;
            }
            if (tipo_termino == tipo_termino_anterior)
            {
                valid = false;
                break;
            }
            else
            {
                tipo_termino_anterior = tipo_termino;
            }
            i++;
        }
        return valid;
    }
    
    private void lstRespuestasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstRespuestasActionPerformed
        // Cargar otro texto en el edit
        txtTextoPregunta.setText(lstRespuestas.getModel().getElementAt(lstRespuestas.getSelectedIndex()));
        txtTextoRespuesta.setText(lstRespuestas.getModel().getElementAt(lstRespuestas.getSelectedIndex()));
    }//GEN-LAST:event_lstRespuestasActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        if (todosSeteados()) {
            //cargo los datos en el paso 3
            cargarDatos();
            tabPanel.setEnabledAt(2, true);
            tabPanel.setSelectedIndex(tabPanel.getSelectedIndex() + 1);
        }else{
            JOptionPane.showMessageDialog(null, "Hay terminos sin un Tipo especificado");
            tabPanel.setEnabledAt(2, false);
        }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void jButtonUnirConceptosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnirConceptosActionPerformed
        // TODO add your handling code here:
        // se podria modificar el primero termino agregando los temrinos siguiwntes en el nombre
        int[] indexs=grillaTerminos.getSelectedRows();
        int diferencia = 0;
        boolean flag = true;
        
        // verifica que los términos seleccionados para la unión sean contiguos
        // validando que no haya una diferencia mayor a uno entre los índices

        for (int i = 1; i < indexs.length; i++) { 
            diferencia = indexs[i] - indexs[i-1];
             if (diferencia > 1) {
                 JOptionPane.showMessageDialog(null, "Hay términos no contiguos seleccionados.");
                 flag = false;
                 break;
             }
        }
        
        // si los términos son contiguos, hace el merge y setea nuevamente la grilla.
        if (flag) {
        int startTermino= indexs[0];
        int countTerminos=indexs.length;
        respuesta.setTerminos(respuesta.mergeTerminos(startTermino, countTerminos));
        setearGrilla();
        }
    }//GEN-LAST:event_jButtonUnirConceptosActionPerformed

    private void btnGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGraphActionPerformed

        if (ValidarGrilla())
        {
            int Rows = modelo.getRowCount();
            //LinkedHashMap<Integer, String> terminos = new LinkedHashMap();
            LinkedHashMap<Integer, Tuple2<String,Boolean>> terminos = new LinkedHashMap();
            // Cargar todos los términos EXCEPTO los que se van a ignorar en un vector
            //ArrayList<Termino> a_graficar = new ArrayList<Termino>();
            int indice_termino = 1;
            for (int i=0; i<Rows; i++)
            {
                Termino t = modelo.getProductoAt(i);
                // Si no hay que ignorarlo meterlo en la lista de elementos graficables
                if (!t.getTipo().equalsIgnoreCase("I"))
                {
                    Boolean en_db = (modelo.isCellEditable(i, 2) == false);
                    Tuple2 <String,Boolean> elemento = new Tuple2(t.getNombre(),en_db);
                    // DEBUG
                    // System.out.printf("Concepto: %s, Editable: %s\r\n", t.getNombre(), en_db);
                    // Arranco en 1 (indice_termino) porque el primer ID en la lista tiene que empezar en 1
                    terminos.put(indice_termino, elemento);
                    indice_termino++;
                }
            }
            GraphViewer instance = new GraphViewer();
            instance.viewMapTuple(terminos, true);
        }
        else
        {
            JOptionPane.showMessageDialog(null, "El formato de la grilla no es válido. Dos CONCEPTOS, Dos RELACIONES, Inicio o fin en RELACION");
        }
    }//GEN-LAST:event_btnGraphActionPerformed

    private void btnValidarRespuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidarRespuestaActionPerformed
        try {
            // respuesta es una propiedad de la clase, porque debo utilizarla
            // en distintos lugares
            // Se inicializa al analizar el texto
            respuesta = new Respuesta(txtTextoRespuesta.getText());
            boolean seguir = ValidarTexto(respuesta);
            if (seguir) {
                //codigo conceptos

                // Hacer una consulta a la base de Conceptos
                ConceptManager cm = new ConceptManager("remote:localhost/PPR", "admin", "admin");
                respuesta = cm.evaluarRespuesta(respuesta);

                // Recorrer todos los terminos y mostrar cada uno, con su tipo, en el campo
                /*
                StringBuilder bld = new StringBuilder();
                bld.append(String.format("Cantidad de términos: %d\n", respuesta.getTerminos().size()));
                for (Termino t : respuesta.getTerminos()) {
                    String item = String.format("%s - [%s]\n", t.getNombre(), t.getTipo());
                    bld.append(item);
                }
                */        //txtMostrarErroresRespuesta.append("\n"+bld.toString());

                //fin codigo conceptos

                setearGrilla();

            }
        } catch (IOException ex) {
            Logger.getLogger(ElementoExamen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnValidarRespuestaActionPerformed

    private void jButtonSepararTerminosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSepararTerminosActionPerformed
        int[] indexs = grillaTerminos.getSelectedRows();
        if(indexs.length!=1){
             JOptionPane.showMessageDialog(null, "Solo se debe seleccionar una fila a dividir");
        }
        else {
            int index=indexs[0];
            // Validar que no sea un concepto compuesto de la base de datos
            // esos ya estan almacenados asi y no se pueden dividir
            if (grillaTerminos.isCellEditable(index, 2)) {
                respuesta.unmergeTerminos(index);
                setearGrilla();
            }
            else
                JOptionPane.showMessageDialog(null, "El concepto ya está almacenado. No es posible dividirlo.");
        }
    }//GEN-LAST:event_jButtonSepararTerminosActionPerformed

    private void btn_alta_respuestaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_alta_respuestaActionPerformed
       
        // Dar de alta las respuestas!
       boolean exito = true;
       //Array de terminos que contendrá la respuesta del docente. Solo contiene
       //conceptos y relaciones. 
       //Lo conceptos están en los casilleros cuyo índice es par y las relaciones
       //en los casilleros cuyo índice es impar
        ArrayList<Termino> terminos = new ArrayList<Termino>();
        
        for (Termino termino : this.modelo.getTerminos()) {
            //Se filtran los terminos que el docente marcó para ignorar
            if (!termino.getTipo().equalsIgnoreCase("I")) terminos.add(termino);
        }
        
        ConceptManager cm = new ConceptManager("remote:localhost/PPR", "admin", "admin");
        
        //Se recorre la lista de términos de a dos posiciones.
        //El concepto origen de la estructura está en la posición (i-2)
        //La relación de la estructura está en la posición (i-1)
        //El concepto destino está en la posición i
        //Se recorre los conceptos destino y a partir de allí se obtiene el 
        //concepto origen y la relación
        for (int i = 2; i < terminos.size(); i= i+2) {
            
            
            ArrayList<Termino> co = this.cambiarASingular(terminos.get(i-2).getNombre().toUpperCase().split(" "));
            String origen = this.aString(co);
                    
            ArrayList<Termino> cd = this.cambiarASingular(terminos.get(i).getNombre().toUpperCase().split(" "));
            String destino = this.aString(cd);
                    
            String rel = "";
            ArrayList<Termino> relaciones = this.cambiarASingular(terminos.get(i-1).getNombre().split(" "));
            rel = this.aString(relaciones);
            rel = CommonsFunctions.toCamelCase(rel);
                    
            
            System.out.println("----------");
            System.out.println("Origen: " +  origen);
            System.out.println("Relacion: " + rel);
            System.out.println("Destino: " + destino);
            
            cm.addStruct(origen, destino, rel);            
            
            exito = exito && cm.existStruct(origen, destino, rel);
            
        }
        
        if (exito){
            JOptionPane.showMessageDialog(this, "Se ha cargado la respuesta exitosamente");
            this.dispose();
        }
        else JOptionPane.showMessageDialog(this, "Ha ocurrido un error. No se ha cargado la respuesta");
        
    }//GEN-LAST:event_btn_alta_respuestaActionPerformed
    
    private String aString(ArrayList<Termino> terminos){
        String cadena = "";
            for (int i = 0; i < terminos.size(); i++) {
                    cadena += terminos.get(i).getNombre();
                    if ((i+1) != terminos.size()) cadena += " ";
        }
        return cadena;
    }
    
    private ArrayList<Termino> cambiarASingular(String [] terminos){
        ArrayList<Termino> term = new ArrayList<Termino>();
        for (int i = 0; i < terminos.length; i++) {
            term.add(new Termino(terminos[i]));
        }
        
        ManejoLang ml = new ManejoLang();
        return ml.cambiarPluralPorSingular(term);
        
     }
    
    public boolean ValidarTexto(Pregunta pregunta) throws IOException {
        LangTools lt = new LangTools();
        Pregunta p = (Pregunta) lt.CheckElementoExamen(pregunta);
        setSOUTText(p);
        
        return !p.hasErrors();
    }
    
    public boolean ValidarTexto(Respuesta respuesta) throws IOException {
        LangTools lt = new LangTools();
        ConceptManager cm = new ConceptManager ("remote:localhost/PPR","admin","admin");
        Respuesta r = lt.CheckRespuesta(respuesta,cm.getConceptosComplejos(),cm.getRelacionesComplejas());
        setSOUTText(r);
        return !r.hasErrors();
    }
    
    /*
    public void setSOUTText(Respuesta respuesta) {

        // Primero borrar el log
        txtMostrarErroresRespuesta.setText("");
        ArrayList<Termino> terminos = respuesta.getTerminos();
        StringBuilder bld = new StringBuilder();
        bld.append(String.format("Cantidad de palabras: %d\n", terminos.size()));
        for (Termino termino : terminos) {
            if (termino.hasErrors()) {
                String item = String.format("Error en la palabra: %s\n  - Corrección sugerida: %s\n", termino.getNombre(), termino.getSugerenciasCorreccion());
                bld.append(item);
            }
        }
        if (!respuesta.hasErrors()) {
            bld.append("El texto NO contiene errores.");
        }
        
        txtMostrarErroresRespuesta.setText(bld.toString());
    }*/

    // método setSOUTText genérico para ElementoExamen
    public void setSOUTText(ElementoExamen elemento) {

        // Primero borrar el log
        txtMostrarErrores.setText("");
        ArrayList<Termino> terminos = elemento.getTerminos();
        StringBuilder bld = new StringBuilder();
        bld.append(String.format("Cantidad de palabras: %d\n", terminos.size()));
        for (Termino termino : terminos) {
            if (termino.hasErrors()) {
                String item = String.format("Error en la palabra: %s\n  - Corrección sugerida: %s\n", termino.getNombre(), termino.getSugerenciasCorreccion());
                bld.append(item);
            }
        }
        if (!elemento.hasErrors()) {
            bld.append("El texto NO contiene errores.");
        }
        
        txtMostrarErrores.setText(bld.toString());
    }

    /**
     * Seteo la grilla y todos sus datos de nuevo para no tener problema de indices
     * al cambiar los terminos o modificarlos
     */
    
    private void setearGrilla() {
        TableColumn col3;
        modelo = new GrillaTerminos(respuesta.getTerminos());
        grillaTerminos.setModel((TableModel) modelo);
        col3 = grillaTerminos.getColumnModel().getColumn(2);
        col3.setCellEditor(new CeldaComboBoxEditor());
        terminosAgregar= modelo.TerminosAgregar();
    }
    
    /**
     * Chequeo si todos los terminos poseen su tipo
     * @return setados, donde digo si estan o no todos seteados
     */
    
    public boolean todosSeteados(){
        boolean seteados=true;
        for (Termino t : respuesta.getTerminos()) {
            if (t.getTipoAsString().equalsIgnoreCase("")) {
                seteados= false;
            }
        }
        return seteados;
    }

    /**
     * Cargo los terminos nuevos en el paso 3.
     * El metodo solo se ejecuta si se completo el paso 2
     */
    private void cargarDatos() {
        
        // Primero borrar el log
        txtConceptosAlta.setText("");
        txtRelacionesAlta.setText("");
        
        StringBuilder conceptos = new StringBuilder();  
        StringBuilder relaciones = new StringBuilder();
        for (Termino termino : terminosAgregar) {            
            if (termino.getTipo().equals("C")) {
                conceptos.append(termino.getNombre());
                conceptos.append(", ");
            }else if (termino.getTipo().equals("R")) {
                relaciones.append(termino.getNombre());
                relaciones.append(", ");
            }           
        }
        
        if (conceptos.length()>0) {
             txtConceptosAlta.setText(conceptos.toString().substring(0, conceptos.toString().length()-2));
        }else{
        txtConceptosAlta.setText("No hay conceptos nuevos");
        }
        if (relaciones.length()>0) {
            txtRelacionesAlta.setText(relaciones.toString().substring(0, relaciones.toString().length()-2));
        }else{
        txtRelacionesAlta.setText("No hay relaciones nuevas");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnGraph;
    private javax.swing.JButton btnNextPregunta;
    private javax.swing.JButton btnPrev;
    private javax.swing.JButton btnValidarPregunta;
    private javax.swing.JButton btnValidarRespuesta;
    private javax.swing.JButton btn_alta_respuesta;
    private javax.swing.JTable grillaTerminos;
    private javax.swing.JButton jButtonSepararTerminos;
    private javax.swing.JButton jButtonUnirConceptos;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblPregunta;
    private javax.swing.JComboBox<String> lstRespuestas;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTextArea txtConceptosAlta;
    private javax.swing.JTextArea txtMostrarErrores;
    private javax.swing.JTextArea txtRelacionesAlta;
    private javax.swing.JTextArea txtTextoPregunta;
    private javax.swing.JTextArea txtTextoRespuesta;
    // End of variables declaration//GEN-END:variables

    
    
    
}
